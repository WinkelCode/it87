name: 'Package and prepare release'
on:
  # push:
  #   branches:
  #     - master
  workflow_dispatch:
  push:
jobs:
  build_and_test_apk_testing:
    uses: ./.github/workflows/packagetool.yml
    with:
      package_system: 'apk'
      run_tests: false
      produce_artifact: true
      use_build_cache: true
  # build_and_test_apk:
  #   uses: ./.github/workflows/packagetool.yml
  #   with:
  #     package_system: 'apk'
  #     run_tests: true
  #     produce_artifact: true
  #     use_build_cache: true
  # build_and_test_deb:
  #   uses: ./.github/workflows/packagetool.yml
  #   with:
  #     package_system: 'deb'
  #     run_tests: true
  #     produce_artifact: true
  #     use_build_cache: true
  # build_and_test_rpm:
  #   uses: ./.github/workflows/packagetool.yml
  #   with:
  #     package_system: 'rpm'
  #     run_tests: true
  #     produce_artifact: true
  #     use_build_cache: true
  prepare_release:
    needs:
      - build_and_test_apk_testing
      # - build_and_test_apk
      # - build_and_test_deb
      # - build_and_test_rpm
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Gather variables
        id: jobenv
        run: |
          printf 'RELEASE_TIMESTAMP=%s\n' "$(date -u '+%Y-%m-%d %H:%M:%S')" | tee -a "$GITHUB_OUTPUT"
          printf 'COMMIT_MESSAGE=%s\n' "$(git log -1 --pretty=%B | head -n 1)" | tee -a "$GITHUB_OUTPUT"
          printf 'COMMIT_HASH=%s\n' "$(git rev-parse HEAD)" | tee -a "$GITHUB_OUTPUT"
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: /tmp/artifacts
      - name: Create tarballs
        run: |
          mkdir -p /tmp/tarballs
          for artifact_dir in /tmp/artifacts/*; do
            artifact_name="${artifact_dir##*/}"
            tar -C "$artifact_dir" -czf "/tmp/tarballs/$artifact_name.tar.gz" .
          done
      - name: Create release draft
        uses: softprops/action-gh-release@c9b46fe7aad9f02afd89b12450b780f52dacfb2d
        with:
          name: Snapshot ${{ steps.jobenv.outputs.RELEASE_TIMESTAMP }} - "${{ steps.jobenv.outputs.COMMIT_MESSAGE }}"
          body: |
            Packaged commit: `${{ steps.jobenv.outputs.COMMIT_HASH }}`
            # Asset contents:
              - release-alpine-akms-apk.tar.gz
                Module and supporting files as Alpine Linux '.apk' packages.
              - release-alpine-akms-manual.tar.gz
                Module and supporting files for Alpine Linux via manual installation.
                - Note: `/etc/modprobe.d/it87-oot.conf` should only be installed if `ignore_resource_conflict` option is needed!
              - release-debian-dkms-deb.tar.gz
                Module as Debian '.deb' package.
                - Note: Currently does not include package for `ignore_resource_conflict` option.
              - release-redhat-akmods-rpm.tar.gz
                Module and supporting files as Red Hat '.rpm' packages, also works with Fedora Silverblue & co.
              - release-redhat-akmods-source-rpm.tar.gz
                Source RPMs (for debugging and inspection).
          draft: true
          prerelease: true
          tag_name: ${{ steps.jobenv.outputs.RELEASE_TIMESTAMP }}
          files: /tmp/tarballs/*