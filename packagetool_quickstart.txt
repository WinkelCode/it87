packagetool.sh assists in the creation of a packaged version of the module for Alpine Linux (via AKMS), Fedora & co (including Silverblue) (via akmods), and Debian & co (via DKMS).
It uses a container to build the packages, to ensure the build environment is reproducible and avoid touching the host system.

Basic usage, for this example on Silverblue 38:
1. Docker (optionally with buildx) or Podman is required to use the program. (Podman comes pre-installed on Fedora Silverblue)
	The container runtime doesn't matter too much, but using either one has fixed some odd issues in the past.

2. Run ./packagetool.sh --container_runtime=podman --package_system=rpm --container_security_privileged
	--container_runtime and --package_system are always required.
	--container_security_privileged is only required here because of Silverblue's SELinux restrictions on mounted directories. (More granular security options are "TODO".)
	To see all options, run the program with --help.

	The program also includes basic tests for package installation and module building via the distribution's dynamic module building mechanism. For this, run the program with --run_build_tests. Please note that this requires additional dependencies which increase the size of the container image, in Fedora's case by quite a lot.

3. The resulting packages can be found in the ./.releases directory.

The tool uses the following base images:
* docker.io/library/alpine:latest
* registry.fedoraproject.org/fedora-minimal:latest
* docker.io/library/debian:stable-slim

The resulting images are named "it87-{package_system}-build" or "it87-{package_system}-build-and-test"

It is recommended to delete the base images after some time to ensure that a recent version is used. The resulting images can also be deleted to save disk space.

A wrapper for GitHub Actions is also provided in ./.github/workflows/packagetool.yml
The GitHub Actions workflow resets its build cache at the beginning of each week of the year (unless cache usage has been specifically disabled).
